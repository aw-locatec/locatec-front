{"version":3,"sources":["modules/loading.ts","types.tsx","modules/theme.ts","modules/snackbar.ts","modules/markers.ts","constants/Constants.ts","modules/myLocation.ts","modules/index.ts","hooks/useLayout.ts","constants/Colors.ts","hooks/useThemeColor.ts","components/Themed.tsx","components/report/elements/naviButtons.tsx","constants/Strings.ts","components/report/elements/StepIndicator.tsx","constants/Size.ts","components/report/view/Complete.tsx","components/report/elements/Menu.tsx","utils/mapLocTypeToStr.ts","components/report/view/Info.tsx","utils/makeGoogleIcon.js","components/report/elements/MapView.tsx","components/report/view/Map.tsx","components/report/view/Report.tsx","components/elements/Alert.tsx","api/address.ts","api/requestList.ts","components/report/container/ReportContainer.tsx","screens/ReportScreen.tsx","screens/NotFoundScreen.tsx","utils/calculateEuclidean.ts","utils/isTwoRegionSame.ts","components/main/elements/CustomButtons.tsx","components/main/elements/LeftBottomButtons.tsx","components/main/elements/RightBottomSpeedDial.tsx","components/main/view/Main.tsx","components/main/container/MainContainer.tsx","screens/MainScreen.tsx","components/elements/Switch.tsx","navigation/LinkingConfiguration.ts","navigation/index.tsx","components/elements/Loading.tsx","utils/parseLocation.ts","utils/getMyRegion.ts","api/wholeList.ts","AppInit.tsx","api/serverError.ts","App.tsx","assets/images/map_marker.png","assets/images/map_marker_user.png","assets/images/map_marker_smoking.png","assets/images/map_marker_trash.png","assets/fonts/NotoSansKR-Regular.otf"],"names":["LOADING","loadingReducer","state","action","type","LIGHT","SMOKE","setTheme","theme","value","SNACKBAR","CLEAR","snackbarReducer","payload","initialState","isWeb","Platform","OS","deltas","latitudeDelta","longitudeDelta","centerSchool","latitude","longitude","region","isInside","rootReducer","combineReducers","loading","snackbar","markers","myLocation","useLayout","useState","window","Dimensions","get","isSmallDevice","width","dimensions","setDimensions","useEffect","callback","addEventListener","removeEventListener","light","text","background","tint","tabIconDefault","tabIconSelected","buttonBackground","buttonTitle","dark","colorSet","stRed","stBlue","stGray","useThemeColor","props","colorName","useSelector","colorFromProps","Colors","Text","style","lightColor","darkColor","otherProps","color","fontFamily","View","backgroundColor","Icon","tvParallaxProperties","undefined","Button","buttonStyle","titleStyle","titleColor","font","height","SpeedDial","containerStyle","actions","map","item","idx","Action","key","ListItem","children","React","memo","goNext","goPrev","position","last","flexDirection","title","onPress","left","right","locStrArray","labels","customStyles","stepStrokeFinishedColor","stepIndicatorLabelFinishedColor","separatorFinishedColor","stepIndicatorFinishedColor","stepStrokeWidth","stepStrokeCurrentColor","stepIndicatorCurrentColor","stepIndicatorLabelCurrentColor","currentStepLabelColor","stepStrokeUnFinishedColor","separatorUnFinishedColor","stepIndicatorUnFinishedColor","stepIndicatorLabelUnFinishedColor","labelColor","StepIndicator","layout","marginTop","marginBottom","currentPosition","stepCount","length","completion_animation","require","styles","StyleSheet","create","container","flex","lottieContainer","justifyContent","alignItems","textContainer","goBackContainer","buttonContainer","Complete","gotoHome","gotoReport","source","autoPlay","loop","fontSize","anchorContainer","borderWidth","borderColor","anchorStyle","menuStyle","padding","Menu","locationType","settingLocationType","popover","MENU_ITEM_WIDTH","borderTopWidth","zIndex","str","mapStrToLocType","MENU_ITEM_HEIGHT","bottomDivider","withOverlay","withPointer","ModalComponent","Modal","mapLocTypeToStr","name","size","listItem","listItemHeader","selectAddButtonContainer","imageContainer","reportContainerView","reportContainer","Info","selectPhoto","photo","sendRequest","addPhoto","settingAddPhoto","IMAGE_WIDTH","IMAGE_HEIGHT","marginLeft","cancelled","uri","borderRadius","makeGoogleIcon","image","google","maps","MarkerImage","Size","MapView","mapViewRef","onPressMap","ref","defaultZoom","options","disableDefaultUI","v","latLng","lat","lng","coordinate","icon","labelContainer","label","margin","stylesFunc","pagerChildCaontainer","pageChildInside","overflow","Report","pagerRef","contentArray","FlatList","initialScrollIndex","horizontal","data","keyExtractor","index","scrollEnabled","showsHorizontalScrollIndicator","renderItem","Alert","desc","onNegativePress","onPositivePress","confirm","ADDRESS","sendRequestApi","a","async","axios","post","ReportContainer","navigation","setPosition","useRef","setLocationType","setPhoto","prevPhoto","setPrevPhoto","setAddPhoto","setRegion","dispatch","useDispatch","pickPhoto","ImagePicker","granted","mediaTypes","Images","allowsEditing","aspect","quality","base64","result","scrollToIndex","to","current","animated","viewPosition","useCallback","obj","navigate","ReportScreen","NotFoundScreen","TouchableOpacity","replace","link","linkText","fontWeight","paddingVertical","calculateEuclidean","b","Math","pow","abs","isTwoRegionSame","one","two","FloatingButton","raised","CustomSpeedDial","actionButtonContainer","actionButtonStyle","FLOATING_BUTTON_WIDTH","buttonCol","bottom","paddingLeft","paddingRight","LeftBottomButtons","goToReport","animateToClosest","RightBottomSpeedDial","isOpen","toggleIsOpen","changeLocationType","openIcon","onOpen","onClose","Main","markerImages","onPressMarker","onAnimateRegion","onRegionChangeComplete","filter","marker","coords","MainContainer","setMarkerImages","setIsOpen","mainInit","prev","coord","animateToRegion","reg","center","curType","closestRegion","minLength","forEach","curLength","setTimeout","MainScreen","Switch","setValue","onValueChange","AsyncStorage","setItem","linking","prefixes","config","screens","NotFound","Stack","createNativeStackNavigator","Navigation","colorScheme","NavigationContainer","DarkTheme","DefaultTheme","Navigator","Screen","component","headerRight","headerTitleStyle","headerLeft","marginRight","Loading","colorFilters","keypath","parseToRegion","location","getMyRegion","Location","status","Error","locationSuccess","tryCount","accuracy","High","parsed","getWholeListApi","res","response","AppInit","isLoadingComplete","setLoadingComplete","ret","console","log","startAsync","Font","notosans","getItem","processed","parseFloat","imageUrl","onFinish","onError","warn","store","createStore","composeWithDevTools","applyMiddleware","logger","RootApp","App","snackbarState","visible","Boolean","onDismiss","duration","StatusBar","module","exports"],"mappings":"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","file":"static/js/app.16e83e8f.chunk.js","sourcesContent":["// 액션 타입\nconst LOADING = \"loading/LOADING\" as const;\nconst UNLOADING = \"loading/UNLOADING\" as const;\n\n// 액션\nexport const loading = () => ({ type: LOADING });\nexport const unloading = () => ({ type: UNLOADING });\ntype LoadingAction = ReturnType<typeof loading> | ReturnType<typeof unloading>;\n\n//초기 상태\nexport type LoadingState = boolean;\nconst initialState: LoadingState = false;\n\n// 리듀서\nfunction loadingReducer(\n   state: LoadingState = initialState,\n   action: LoadingAction\n): LoadingState {\n   switch (action.type) {\n      case LOADING:\n         return true;\n      case UNLOADING:\n         return false;\n      default:\n         return state;\n   }\n}\n\nexport default loadingReducer;\n","/**\r\n * 여러군데서 사용되는 타입의 관리를 위한 파일\r\n *\r\n * 한군데서만 사용되는 타입은 그 파일 또는 폴더에 저장함.\r\n */\r\nimport { NativeStackScreenProps } from \"@react-navigation/native-stack\";\r\nimport { ImageInfo } from \"expo-image-picker/build/ImagePicker.types\";\r\nimport { ImagePickerResult } from \"react-native\";\r\nimport { Region } from \"react-native-maps\";\r\n\r\n// navigation 관련 타입들 선언\r\ndeclare global {\r\n   namespace ReactNavigation {\r\n      interface RootParamList extends RootStackParamList {}\r\n   }\r\n}\r\n\r\nexport type RootStackParamList = {\r\n   Main: undefined;\r\n   Report: undefined;\r\n   NotFound: undefined;\r\n};\r\n\r\nexport type RootStackScreenProps<Screen extends keyof RootStackParamList> =\r\n   NativeStackScreenProps<RootStackParamList, Screen>;\r\n\r\n// 테마 타입들\r\nexport const LIGHT = \"light\" as const;\r\nexport const DARK = \"dark\" as const;\r\n\r\nexport type ThemeScheme = typeof LIGHT | typeof DARK;\r\n\r\n//좌표 타입\r\nexport type CoordType = {\r\n   latitude: number;\r\n   longitude: number;\r\n};\r\n\r\n/* \r\n   위치 데이터 타입\r\n*/\r\nexport const SMOKE = \"smoking\" as const;\r\nexport const TRASHCAN = \"trash\" as const;\r\n\r\nexport type LocationType = typeof SMOKE | typeof TRASHCAN;\r\n\r\nexport type MarkerType = {\r\n   type: LocationType;\r\n   coords: { latitude: number; longitude: number };\r\n   image: string;\r\n};\r\n\r\nexport type MarkerServerDataType = {\r\n   type: LocationType;\r\n   latitude: string;\r\n   longitude: string;\r\n   imageUrl: string;\r\n};\r\n\r\n/* react-native-map 의 MapView에서 onRegionChangeComplete 이벤트 콜백함수의 props 타입*/\r\nexport type AnimateRegionType = (\r\n   reg: Region,\r\n   details?:\r\n      | {\r\n           isGesture: boolean;\r\n        }\r\n      | undefined\r\n) => void;\r\n\r\n// launchImageLibraryAsync 함수 결과 타입\r\nexport type ImageLibraryReturn = ({ cancelled?: boolean } & ImageInfo) | null;\r\n","import { DARK, LIGHT, ThemeScheme } from \"../types\";\n\n// 액션 타입\nconst SET_THEME = \"theme/SET_THEME\" as const;\n\n// 액션\nexport const setTheme = (theme: string) => ({\n   type: SET_THEME,\n   value: theme !== LIGHT ? (theme !== DARK ? LIGHT : DARK) : LIGHT,\n});\ntype ThemeAction = ReturnType<typeof setTheme>;\n\n// 초기 상태\nconst initialState: ThemeScheme = LIGHT;\nexport type themeState = ThemeScheme;\n\n// 리듀서\nexport default function themeReducer(\n   state: ThemeScheme = initialState,\n   action: ThemeAction\n): themeState {\n   switch (action.type) {\n      case SET_THEME:\n         return action.value;\n      default:\n         return state;\n   }\n}\n","const SNACKBAR = \"snackbar/SNACKBAR\" as const;\nconst CLEAR = \"snackbar/CLEAR\" as const;\n\nexport type SnackbarState = string;\n\nexport const setSnackbar = (payload: SnackbarState) => ({\n   type: SNACKBAR,\n   payload: payload,\n});\nexport const clearSnackbar = () => ({ type: CLEAR });\n\ntype SnackbarAction =\n   | ReturnType<typeof setSnackbar>\n   | ReturnType<typeof clearSnackbar>;\n\nconst initialState: SnackbarState = \"\";\n\nfunction snackbarReducer(\n   state: SnackbarState = initialState,\n   action: SnackbarAction\n): SnackbarState {\n   switch (action.type) {\n      case SNACKBAR:\n         return action.payload;\n      case CLEAR:\n         return initialState;\n      default:\n         return state;\n   }\n}\n\nexport default snackbarReducer;\n","import { MarkerType } from \"../types\";\r\n\r\n// 액션 타입\r\nconst SET_MARKERS = \"theme/SET_MARKERS\" as const;\r\n\r\n// 초기 상태\r\nexport type MarkersState = MarkerType[];\r\nconst initialState: MarkersState = [];\r\n\r\n// 액션\r\nexport const setMarkers = (markers: MarkersState) => ({\r\n   type: SET_MARKERS,\r\n   value: markers,\r\n});\r\ntype ThemeAction = ReturnType<typeof setMarkers>;\r\n\r\n// 리듀서\r\nexport default function markersReducer(\r\n   state: MarkersState = initialState,\r\n   action: ThemeAction\r\n): MarkersState {\r\n   switch (action.type) {\r\n      case SET_MARKERS:\r\n         return action.value;\r\n      default:\r\n         return state;\r\n   }\r\n}\r\n","/**\r\n * 여러군데서 사용되는 상수 관리.\r\n */\r\nimport { Platform } from \"react-native\";\r\nimport { Region } from \"react-native-maps\";\r\n\r\nexport const isWeb: boolean = Platform.OS === \"web\" ? true : false;\r\n\r\nexport const deltas: { latitudeDelta: number; longitudeDelta: number } = {\r\n   latitudeDelta: 0.003,\r\n   longitudeDelta: 0.003,\r\n};\r\n\r\nexport const centerSchool: Region = {\r\n   latitude: 37.63232307069136,\r\n   longitude: 127.07801836259382,\r\n   ...deltas,\r\n};\r\n","/**\r\n * 유저의 현재 위치를 저장하는 store\r\n */\r\nimport { Region } from \"react-native-maps\";\r\nimport { centerSchool } from \"../constants/Constants\";\r\n\r\n// 액션 타입\r\nconst SET_MYLOCATION = \"theme/SET_MYLOCATION\" as const;\r\n\r\n// 초기 상태\r\nexport type MyLocationType = {\r\n   region: Region; // 유저 위치\r\n   isInside: boolean; // 학교 안인지\r\n};\r\nconst initialState: MyLocationType = { region: centerSchool, isInside: false };\r\n\r\n// 액션\r\nexport const setMyLocation = (markers: MyLocationType) => ({\r\n   type: SET_MYLOCATION,\r\n   value: markers,\r\n});\r\ntype ThemeAction = ReturnType<typeof setMyLocation>;\r\n\r\n// 리듀서\r\nexport default function myLocationReducer(\r\n   state: MyLocationType = initialState,\r\n   action: ThemeAction\r\n): MyLocationType {\r\n   switch (action.type) {\r\n      case SET_MYLOCATION:\r\n         return action.value;\r\n      default:\r\n         return state;\r\n   }\r\n}\r\n","import { combineReducers } from \"redux\";\r\nimport loading from \"./loading\";\r\nimport theme from \"./theme\";\r\nimport snackbar from \"./snackbar\";\r\nimport markers from \"./markers\";\r\nimport myLocation from \"./myLocation\";\r\n\r\n// redux reducer 결합\r\nconst rootReducer = combineReducers({\r\n   loading,\r\n   theme,\r\n   snackbar,\r\n   markers,\r\n   myLocation,\r\n});\r\n\r\nexport default rootReducer;\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>;\r\n","/**\n * 웹 responsive 를 대응하기 위한 hook\n * 화면 크기 변화를 계속 트래킹하여 화면 변화에 순간적으로 대응할 수 있도록 해준다.\n */\n\nimport React, { useState, useEffect } from \"react\";\nimport { Dimensions } from \"react-native\";\n\n// 레이아웃 타입 선언\nexport type LayoutType = {\n   window: {\n      width: number;\n      height: number;\n   };\n   isSmallDevice: boolean;\n};\n\n// 레이아웃 hook\n// 너비가 800px 이하일경우 작은 화면이라고 함.\nexport default function useLayout(): LayoutType {\n   const [dimensions, setDimensions] = useState<LayoutType>({\n      window: Dimensions.get(\"window\"),\n      isSmallDevice: Dimensions.get(\"window\").width < 800,\n   });\n\n   useEffect(() => {\n      const callback = ({\n         window,\n      }: {\n         window: { width: number; height: number };\n      }) => {\n         setDimensions({ window: window, isSmallDevice: window.width < 800 });\n      };\n\n      // react-native에서 제공되는 Dimensions 에 이벤트를 등록하여 화면 변화 트래킹\n      Dimensions.addEventListener(\"change\", callback);\n\n      return () => Dimensions?.removeEventListener(\"change\", callback);\n   }, []);\n\n   return dimensions;\n}\n","// 색상 전역관리\nconst tintColorLight = \"#2f95dc\";\nconst tintColorDark = \"#fff\";\nconst buttonBackgroundColor = \"#2196f3\";\n\nexport default {\n   light: {\n      text: \"#000\",\n      background: \"#fff\",\n      tint: tintColorLight,\n      tabIconDefault: \"#ccc\",\n      tabIconSelected: tintColorLight,\n      buttonBackground: buttonBackgroundColor,\n      buttonTitle: \"black\",\n   },\n   dark: {\n      text: \"#fff\",\n      background: \"#1f1f1f\",\n      tint: tintColorDark,\n      tabIconDefault: \"#ccc\",\n      tabIconSelected: tintColorDark,\n      buttonBackground: buttonBackgroundColor,\n      buttonTitle: \"white\",\n   },\n   colorSet: {\n      stRed: \"rgba(185, 0, 5, 87)\",\n      stBlue: \"rgba(10, 31, 98, 51)\",\n      stGray: \"rgba(143,143,143, 135)\",\n   },\n};\n","import { useSelector } from \"react-redux\";\nimport Colors from \"../constants/Colors\";\nimport { RootState } from \"../modules\";\n\n// 전역 themeColor 관리를 위한 hook\nexport default function useThemeColor(\n   props: { light?: string; dark?: string },\n   colorName: keyof typeof Colors.light & keyof typeof Colors.dark\n) {\n   // 리덕스 store에서 theme 가져와서 전역 theme 상태 관리\n   const theme = useSelector(({ theme }: RootState) => theme);\n   const colorFromProps = props[theme];\n\n   if (colorFromProps) {\n      return colorFromProps;\n   } else {\n      return Colors[theme][colorName];\n   }\n}\n","/**\r\n * 기초 스타일 element를 다크모드 또는 디자인 통일을 위해 한번 감싼 파일.\r\n */\r\n\r\nimport * as React from \"react\";\r\nimport { Text as DefaultText, View as DefaultView } from \"react-native\";\r\nimport {\r\n   IconProps,\r\n   Icon as DefaultIcon,\r\n   Button as DefaultButton,\r\n   ButtonProps,\r\n   SpeedDialProps,\r\n   SpeedDial as DefaultSpeedDial,\r\n   ListItemProps,\r\n   ListItem as DefaultListItem,\r\n} from \"react-native-elements\";\r\nimport useThemeColor from \"../hooks/useThemeColor\";\r\n\r\n// themed elements 의 Props 타입 선언\r\ntype ThemeProps = {\r\n   lightColor?: string;\r\n   darkColor?: string;\r\n};\r\nexport type TextProps = ThemeProps & DefaultText[\"props\"];\r\nexport type ViewProps = ThemeProps & DefaultView[\"props\"];\r\n\r\nexport type ThemedIconProps = ThemeProps & IconProps;\r\nexport type ThemedButtonProps = ThemeProps & ButtonProps & { color?: string };\r\nexport type ThemedSpeedDialProps = ThemeProps &\r\n   SpeedDialProps & { color?: string; actions?: ButtonProps[] };\r\nexport type ThemedListItemProps = ThemeProps & ListItemProps;\r\n\r\n// themed elements 정의\r\nexport function Text(props: TextProps) {\r\n   // 이 함수에서 사용하는 props은 따로 빼주고, 나머지는 otherProps에 넣는다.\r\n   const { style, lightColor, darkColor, ...otherProps } = props;\r\n   // useThemeColor hook을 활용한 전역 테마 색상 관리.\r\n   const color = useThemeColor({ light: lightColor, dark: darkColor }, \"text\");\r\n\r\n   return (\r\n      <DefaultText\r\n         style={[{ color }, style, { fontFamily: \"notosans\" }]}\r\n         {...otherProps}\r\n      />\r\n   );\r\n}\r\n\r\nexport function View(props: ViewProps) {\r\n   const { style, lightColor, darkColor, ...otherProps } = props;\r\n   const backgroundColor = useThemeColor(\r\n      { light: lightColor, dark: darkColor },\r\n      \"background\"\r\n   );\r\n\r\n   return <DefaultView style={[{ backgroundColor }, style]} {...otherProps} />;\r\n}\r\n\r\nexport function Icon(props: ThemedIconProps) {\r\n   const { lightColor, darkColor, ...otherProps } = props;\r\n   const color = useThemeColor({ light: lightColor, dark: darkColor }, \"text\");\r\n\r\n   return (\r\n      <DefaultIcon\r\n         tvParallaxProperties={undefined}\r\n         color={color}\r\n         {...otherProps}\r\n      />\r\n   );\r\n}\r\n\r\nexport function Button(props: ThemedButtonProps) {\r\n   const {\r\n      lightColor,\r\n      darkColor,\r\n      color,\r\n      buttonStyle,\r\n      type,\r\n      titleStyle,\r\n      ...otherProps\r\n   } = props;\r\n   const backgroundColor = useThemeColor(\r\n      { light: lightColor, dark: darkColor },\r\n      \"buttonBackground\"\r\n   );\r\n   const titleColor = useThemeColor(\r\n      { light: lightColor, dark: darkColor },\r\n      \"buttonTitle\"\r\n   );\r\n\r\n   const font = {\r\n      fontFamily: \"notosans\",\r\n   };\r\n\r\n   return (\r\n      <DefaultButton\r\n         type={type}\r\n         titleStyle={[font, titleStyle]}\r\n         {...(() => {\r\n            if (type === \"clear\") {\r\n               return {\r\n                  titleStyle: [{ color: titleColor, ...font }, titleStyle],\r\n               };\r\n            } else {\r\n               return {\r\n                  buttonStyle: [\r\n                     {\r\n                        backgroundColor: color ? color : backgroundColor,\r\n                        height: 50,\r\n                     },\r\n                     buttonStyle,\r\n                  ],\r\n               };\r\n            }\r\n         })()}\r\n         {...otherProps}\r\n      />\r\n   );\r\n}\r\n\r\nexport function SpeedDial(props: ThemedSpeedDialProps) {\r\n   const {\r\n      style,\r\n      lightColor,\r\n      darkColor,\r\n      color,\r\n      buttonStyle,\r\n      containerStyle,\r\n      actions,\r\n      ...otherProps\r\n   } = props;\r\n\r\n   const backgroundColor = useThemeColor(\r\n      { light: lightColor, dark: darkColor },\r\n      \"buttonBackground\"\r\n   );\r\n\r\n   return (\r\n      <DefaultSpeedDial\r\n         buttonStyle={[\r\n            buttonStyle,\r\n            { backgroundColor: color ? color : backgroundColor },\r\n         ]}\r\n         containerStyle={containerStyle}\r\n         style={style}\r\n         {...otherProps}>\r\n         {actions?.map((item, idx) => (\r\n            <DefaultSpeedDial.Action\r\n               {...item}\r\n               key={idx}\r\n               buttonStyle={[\r\n                  {\r\n                     backgroundColor: color ? color : backgroundColor,\r\n                  },\r\n                  item.buttonStyle,\r\n               ]}\r\n               containerStyle={item.containerStyle}\r\n            />\r\n         ))}\r\n      </DefaultSpeedDial>\r\n   );\r\n}\r\n\r\nexport function ListItem(props: ThemedListItemProps) {\r\n   const { lightColor, darkColor, containerStyle, children, ...otherProps } =\r\n      props;\r\n\r\n   const backgroundColor = useThemeColor(\r\n      { light: lightColor, dark: darkColor },\r\n      \"background\"\r\n   );\r\n\r\n   return (\r\n      <DefaultListItem\r\n         containerStyle={[containerStyle, { backgroundColor: backgroundColor }]}\r\n         {...otherProps}>\r\n         {children}\r\n      </DefaultListItem>\r\n   );\r\n}\r\n","import React from \"react\";\r\nimport { View, Button } from \"../../Themed\";\r\n\r\ntype Props = {\r\n   position: number;\r\n   last: boolean;\r\n   goNext: () => void;\r\n   goPrev: () => void;\r\n};\r\n\r\n// 하단에 보여지는 이전/다음 버튼\r\nfunction NaviButtons({ goNext, goPrev, position, last }: Props) {\r\n   return (\r\n      <View\r\n         style={{\r\n            width: \"100%\",\r\n            flexDirection: \"row\",\r\n            height: 60,\r\n         }}>\r\n         {position !== 0 && (\r\n            <Button\r\n               title=\"이전\"\r\n               onPress={goPrev}\r\n               type=\"clear\"\r\n               containerStyle={{ position: \"absolute\", left: 20 }}\r\n            />\r\n         )}\r\n         {!last && (\r\n            <Button\r\n               title=\"다음\"\r\n               onPress={goNext}\r\n               type=\"clear\"\r\n               containerStyle={{ position: \"absolute\", right: 20 }}\r\n            />\r\n         )}\r\n      </View>\r\n   );\r\n}\r\n\r\nexport default React.memo(NaviButtons);\r\n","// 문자열 관리 파일.\n\nexport const appName: string = \"LocateC\";\n\nexport const report_stepIndicator: string[] = [\"위치\", \"정보\", \"완료\"];\n\nexport const smokingPlace: string = \"흡연부스\";\nexport const trashcan: string = \"쓰레기통\";\nexport const locStrArray: string[] = [smokingPlace, trashcan];\n\nexport const changePhotoTitle: string = \"사진 변경\";\nexport const changePhotoContent: string = \"사진을 변경하시겠습니까?\";\n\nexport const YES: string = \"예\";\nexport const NO: string = \"아니요\";\n\nexport const thankyou_for_using: string = \"이용해주셔서 감사합니다.\";\n\nexport const apply_after_inspect: string =\n   \"해당 요청은 관리자 검토 후 반영됩니다.\";\n","/**\r\n * 페이지 상단에 있는 페이지 indicator element\r\n */\r\n\r\nimport React from \"react\";\r\nimport { View } from \"react-native\";\r\n\r\nimport DefaultStepIndicator from \"react-native-step-indicator\";\r\nimport useLayout from \"../../../hooks/useLayout\";\r\nimport { WEB_REPORT_CONTENT_WIDTH } from \"../../../constants/Size\";\r\nimport { report_stepIndicator } from \"../../../constants/Strings\";\r\nimport { isWeb } from \"../../../constants/Constants\";\r\n\r\n// indicator 에 있는 라벨 문자열 배열\r\nconst labels: string[] = report_stepIndicator;\r\n\r\n// indicator 스타일.\r\n// react-native-step-indicator 공식문서에 있는 예제 스타일이 괜찮아서 그대로 사용중\r\nconst customStyles = {\r\n   stepStrokeFinishedColor: \"#2196f3\",\r\n   stepIndicatorLabelFinishedColor: \"#ffffff\",\r\n   separatorFinishedColor: \"#2196f3\",\r\n   stepIndicatorFinishedColor: \"#2196f3\",\r\n\r\n   stepStrokeWidth: 3,\r\n   stepStrokeCurrentColor: \"#2196f3\",\r\n   stepIndicatorCurrentColor: \"#ffffff\",\r\n   stepIndicatorLabelCurrentColor: \"#2196f3\",\r\n   currentStepLabelColor: \"#2196f3\",\r\n\r\n   stepStrokeUnFinishedColor: \"#aaaaaa\",\r\n   separatorUnFinishedColor: \"#aaaaaa\",\r\n   stepIndicatorUnFinishedColor: \"#ffffff\",\r\n   stepIndicatorLabelUnFinishedColor: \"#aaaaaa\",\r\n   labelColor: \"#999999\",\r\n};\r\n\r\n// props 타입 선언\r\ntype Props = {\r\n   position: number;\r\n};\r\n\r\nfunction StepIndicator({ position }: Props) {\r\n   const layout = useLayout();\r\n\r\n   // 웹 화면일 경우 800, 작은 화면일경우 좌우 전체 px, native 환경일경우 100% 차지하도록함.\r\n   return (\r\n      <View\r\n         style={{\r\n            width: isWeb\r\n               ? layout.isSmallDevice\r\n                  ? layout.window.width\r\n                  : WEB_REPORT_CONTENT_WIDTH\r\n               : \"100%\",\r\n            height: 70,\r\n            marginTop: 20,\r\n            marginBottom: 0,\r\n         }}>\r\n         <DefaultStepIndicator\r\n            customStyles={customStyles}\r\n            currentPosition={position}\r\n            labels={labels}\r\n            stepCount={labels.length}\r\n         />\r\n      </View>\r\n   );\r\n}\r\n\r\nexport default StepIndicator;\r\n","// 여러 군데서 사용되는 사이즈 정의\nexport const FLOATING_BUTTON_WIDTH: number = 48;\nexport const INSIDE_SHCOOL: number = 0.007;\nexport const NEAR_PLACE: number = 0.004;\nexport const MARKER_SIZE: number = 30;\nexport const REPORT_PHOTO_HEIGHT: number = 200;\nexport const NAV_HEADER_HEIGHT: number = 64;\nexport const MENU_ITEM_WIDTH: number = 150;\nexport const MENU_ITEM_HEIGHT: number = 50;\nexport const WEB_REPORT_CONTENT_WIDTH: number = 800;\n","/**\r\n * 요청 완료시 나오는 화면\r\n */\r\nimport React from \"react\";\r\nimport LottieView from \"lottie-react-native\";\r\nimport { StyleSheet } from \"react-native\";\r\nimport { Button, Text, View } from \"../../Themed\";\r\nimport Colors from \"../../../constants/Colors\";\r\nimport {\r\n   apply_after_inspect,\r\n   thankyou_for_using,\r\n} from \"../../../constants/Strings\";\r\n\r\n// 애니메이션 로드\r\nconst completion_animation = require(\"../../../assets/animations/completion.json\");\r\n\r\ntype Props = {\r\n   gotoHome: () => void;\r\n   gotoReport: () => void;\r\n};\r\n\r\nfunction Complete({ gotoHome, gotoReport }: Props) {\r\n   return (\r\n      <View style={styles.container}>\r\n         <View style={styles.lottieContainer}>\r\n            <LottieView\r\n               source={completion_animation}\r\n               autoPlay={true}\r\n               loop={true}\r\n               style={{ width: 300, height: 225 }}\r\n            />\r\n            <View style={styles.textContainer}>\r\n               <Text style={{ fontSize: 20, marginBottom: 20 }}>\r\n                  {thankyou_for_using}\r\n               </Text>\r\n               <Text style={{ fontSize: 20 }}>{apply_after_inspect}</Text>\r\n            </View>\r\n         </View>\r\n         <View style={styles.goBackContainer}>\r\n            <Button\r\n               title=\"홈으로\"\r\n               containerStyle={styles.buttonContainer}\r\n               onPress={gotoHome}\r\n               color={Colors.colorSet.stBlue}\r\n            />\r\n            <Button\r\n               title=\"다시 요청\"\r\n               containerStyle={styles.buttonContainer}\r\n               onPress={gotoReport}\r\n               color={Colors.colorSet.stGray}\r\n            />\r\n         </View>\r\n      </View>\r\n   );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n   container: {\r\n      flex: 1,\r\n   },\r\n   lottieContainer: {\r\n      width: \"100%\",\r\n      height: \"80%\",\r\n      justifyContent: \"center\",\r\n      alignItems: \"center\",\r\n      right: 10,\r\n   },\r\n   textContainer: {\r\n      width: \"100%\",\r\n      alignItems: \"center\",\r\n   },\r\n   goBackContainer: {\r\n      flexDirection: \"row\",\r\n      justifyContent: \"space-evenly\",\r\n      width: \"100%\",\r\n      alignItems: \"center\",\r\n   },\r\n   buttonContainer: {\r\n      width: 100,\r\n   },\r\n});\r\n\r\nexport default Complete;\r\n","import React from \"react\";\r\nimport { Modal, StyleSheet } from \"react-native\";\r\nimport { Tooltip } from \"react-native-elements\";\r\nimport Colors from \"../../../constants/Colors\";\r\nimport { MENU_ITEM_HEIGHT, MENU_ITEM_WIDTH } from \"../../../constants/Size\";\r\nimport { locStrArray } from \"../../../constants/Strings\";\r\nimport { LocationType } from \"../../../types\";\r\nimport mapLocTypeToStr, {\r\n   mapStrToLocType,\r\n} from \"../../../utils/mapLocTypeToStr\";\r\nimport { Icon, View, Text, ListItem } from \"../../Themed\";\r\n\r\ntype Props = {\r\n   locationType: LocationType;\r\n   settingLocationType: (v: LocationType) => void;\r\n};\r\n\r\nfunction Menu({ locationType, settingLocationType }: Props) {\r\n   // 아이템을 눌렀을 시 호출되는 콜백\r\n   // locationType를 설정한다.\r\n   const onPressItem = (type: LocationType) => {\r\n      settingLocationType(type);\r\n   };\r\n\r\n   return (\r\n      <Tooltip\r\n         popover={\r\n            <View\r\n               style={{\r\n                  right: MENU_ITEM_WIDTH / 2,\r\n                  borderWidth: 1,\r\n                  borderColor: Colors.colorSet.stGray,\r\n                  borderTopWidth: 0,\r\n                  zIndex: 10,\r\n               }}>\r\n               {locStrArray.map((item, idx) => (\r\n                  <ListItem\r\n                     key={idx}\r\n                     onPress={() => onPressItem(mapStrToLocType(item))}\r\n                     style={{\r\n                        height: MENU_ITEM_HEIGHT - 1,\r\n                        width: MENU_ITEM_WIDTH - 2,\r\n                     }}\r\n                     bottomDivider>\r\n                     <Text>{item}</Text>\r\n                  </ListItem>\r\n               ))}\r\n            </View>\r\n         }\r\n         withOverlay={false}\r\n         withPointer={false}\r\n         containerStyle={[styles.menuStyle]}\r\n         ModalComponent={Modal}>\r\n         <View style={styles.anchorContainer}>\r\n            <View style={styles.anchorStyle}>\r\n               <Text>{mapLocTypeToStr(locationType)}</Text>\r\n               <Icon name=\"sort-down\" type=\"font-awesome\" size={10} />\r\n            </View>\r\n         </View>\r\n      </Tooltip>\r\n   );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n   anchorContainer: {\r\n      width: MENU_ITEM_WIDTH,\r\n      height: MENU_ITEM_HEIGHT,\r\n      borderWidth: 1,\r\n      borderColor: Colors.colorSet.stGray,\r\n   },\r\n   anchorStyle: {\r\n      flexDirection: \"row\",\r\n      justifyContent: \"space-around\",\r\n      alignItems: \"center\",\r\n      width: \"100%\",\r\n      height: \"100%\",\r\n   },\r\n   menuStyle: {\r\n      width: MENU_ITEM_WIDTH,\r\n      height: MENU_ITEM_HEIGHT * locStrArray.length,\r\n      padding: 0,\r\n      backgroundColor: \"transparent\",\r\n   },\r\n});\r\n\r\nexport default Menu;\r\n","import { smokingPlace, trashcan } from \"../constants/Strings\";\r\nimport { LocationType, SMOKE, TRASHCAN } from \"../types\";\r\n\r\n// location type 을 해당하는 문자열로 바꾸어주는 함수\r\nexport default function mapLocTypeToStr(type: LocationType) {\r\n   switch (type) {\r\n      case SMOKE:\r\n         return smokingPlace;\r\n      case TRASHCAN:\r\n         return trashcan;\r\n      default:\r\n         return smokingPlace;\r\n   }\r\n}\r\n\r\n// 문자열을 해당하는 location type으로 바꾸어주는 함수\r\nexport function mapStrToLocType(str: string) {\r\n   switch (str) {\r\n      case smokingPlace:\r\n         return SMOKE;\r\n      case trashcan:\r\n         return TRASHCAN;\r\n      default:\r\n         return SMOKE;\r\n   }\r\n}\r\n","import React from \"react\";\r\nimport { StyleSheet } from \"react-native\";\r\nimport { Image } from \"react-native-elements\";\r\nimport { ScrollView } from \"react-native-gesture-handler\";\r\nimport Colors from \"../../../constants/Colors\";\r\nimport useLayout from \"../../../hooks/useLayout\";\r\nimport {\r\n   MENU_ITEM_HEIGHT,\r\n   WEB_REPORT_CONTENT_WIDTH,\r\n} from \"../../../constants/Size\";\r\nimport { isWeb } from \"../../../constants/Constants\";\r\nimport { ImageLibraryReturn, LocationType } from \"../../../types\";\r\n\r\nimport { Button, ListItem, Text, View } from \"../../Themed\";\r\nimport Menu from \"../elements/Menu\";\r\n\r\n// Prop 타입 선언\r\ntype Props = {\r\n   locationType: LocationType;\r\n   settingLocationType: (v: LocationType) => void;\r\n   selectPhoto: (v: boolean) => Promise<void>;\r\n   photo: ImageLibraryReturn;\r\n   sendRequest: () => Promise<void>;\r\n   addPhoto: boolean;\r\n   settingAddPhoto: (v: boolean) => void;\r\n};\r\n\r\nfunction Info({\r\n   locationType,\r\n   settingLocationType,\r\n   selectPhoto,\r\n   photo,\r\n   sendRequest,\r\n   addPhoto,\r\n   settingAddPhoto,\r\n}: Props) {\r\n   const layout = useLayout();\r\n\r\n   // 이 element에서 사용할 window width를 작은 화면이냐, 웹이냐에 따라 다르게 정의\r\n   // 이 width에 맞춰 이미지 크기를 조절한다.\r\n   const width =\r\n      isWeb && !layout.isSmallDevice\r\n         ? WEB_REPORT_CONTENT_WIDTH\r\n         : layout.window.width;\r\n   const IMAGE_WIDTH: number = width * 0.8;\r\n   const IMAGE_HEIGHT: number = ((width * 0.8) / 4) * 3;\r\n\r\n   // 사진 등록을 눌렀을때 호출되는 콜백\r\n   // addPhoto를 true로 바꾸고, selectPhoto를 호출하여 사진을 고르도록 한다.\r\n   const onPressAddPhoto = () => {\r\n      settingAddPhoto(true);\r\n      selectPhoto(addPhoto);\r\n   };\r\n\r\n   return (\r\n      <ScrollView style={styles.container}>\r\n         <ListItem containerStyle={styles.listItem}>\r\n            <View style={styles.listItemHeader}>\r\n               <Text>타입</Text>\r\n            </View>\r\n            <View>\r\n               <Menu\r\n                  locationType={locationType}\r\n                  settingLocationType={settingLocationType}\r\n               />\r\n            </View>\r\n         </ListItem>\r\n         <ListItem containerStyle={styles.listItem}>\r\n            <View style={styles.listItemHeader}>\r\n               <Text>사진</Text>\r\n            </View>\r\n            <View style={styles.selectAddButtonContainer}>\r\n               <Button\r\n                  title={photo && addPhoto ? \"변경하기\" : \"등록하기\"}\r\n                  color={\r\n                     addPhoto ? Colors.colorSet.stBlue : Colors.colorSet.stGray\r\n                  }\r\n                  containerStyle={{ height: 50 }}\r\n                  buttonStyle={{ height: 50 }}\r\n                  onPress={onPressAddPhoto}\r\n               />\r\n               <Button\r\n                  title=\"등록안함\"\r\n                  color={\r\n                     !addPhoto ? Colors.colorSet.stRed : Colors.colorSet.stGray\r\n                  }\r\n                  buttonStyle={{ height: 50 }}\r\n                  containerStyle={{ height: 50, marginLeft: 50 }}\r\n                  onPress={() => settingAddPhoto(false)}\r\n               />\r\n            </View>\r\n         </ListItem>\r\n         <View style={[styles.imageContainer, { height: IMAGE_HEIGHT }]}>\r\n            {addPhoto && !photo?.cancelled && photo?.uri && (\r\n               <Image\r\n                  source={{ uri: photo.uri }}\r\n                  containerStyle={{\r\n                     width: IMAGE_WIDTH,\r\n                     height: IMAGE_HEIGHT,\r\n                     borderRadius: 40,\r\n                  }}\r\n               />\r\n            )}\r\n         </View>\r\n         <View style={styles.reportContainerView}>\r\n            <Button\r\n               title=\"요청 보내기\"\r\n               containerStyle={styles.reportContainer}\r\n               color={Colors.colorSet.stGray}\r\n               onPress={sendRequest}\r\n            />\r\n         </View>\r\n      </ScrollView>\r\n   );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n   container: {\r\n      width: \"100%\",\r\n      height: \"100%\",\r\n   },\r\n   listItem: {\r\n      height: 70,\r\n      backgroundColor: \"black\",\r\n   },\r\n   listItemHeader: {\r\n      width: 80,\r\n   },\r\n   selectAddButtonContainer: {\r\n      width: \"100%\",\r\n      height: MENU_ITEM_HEIGHT,\r\n      flexDirection: \"row\",\r\n   },\r\n   imageContainer: {\r\n      width: \"100%\",\r\n      marginTop: 10,\r\n      justifyContent: \"center\",\r\n      alignItems: \"center\",\r\n   },\r\n   reportContainerView: {\r\n      width: \"100%\",\r\n      alignItems: \"center\",\r\n      marginTop: 20,\r\n   },\r\n   reportContainer: {\r\n      width: 120,\r\n   },\r\n});\r\n\r\nexport default Info;\r\n","export default function makeGoogleIcon(image, size) {\r\n   return new window.google.maps.MarkerImage(\r\n      image,\r\n      null,\r\n      null,\r\n      null,\r\n      new window.google.maps.Size(...size)\r\n   );\r\n}\r\n","import React from \"react\";\r\nimport { StyleSheet } from \"react-native\";\r\nimport DefaultMapView, { Marker, Region } from \"react-native-maps\";\r\nimport { CoordType } from \"../../../types\";\r\nimport makeGoogleIcon from \"../../../utils/makeGoogleIcon\";\r\n\r\nexport type MapViewProps = {\r\n   region: Region;\r\n   mapViewRef: React.RefObject<DefaultMapView>;\r\n   onPressMap: (coord: CoordType) => void;\r\n};\r\n\r\nfunction MapView({ region, mapViewRef, onPressMap }: MapViewProps) {\r\n   return (\r\n      <DefaultMapView\r\n         key=\"Gmap\"\r\n         ref={mapViewRef}\r\n         region={region}\r\n         style={styles.map}\r\n         defaultZoom={18}\r\n         options={{ disableDefaultUI: true }}\r\n         onPress={(v: any) => {\r\n            onPressMap({\r\n               latitude: v.latLng.lat(),\r\n               longitude: v.latLng.lng(),\r\n            });\r\n         }}>\r\n         <Marker\r\n            coordinate={region}\r\n            icon={makeGoogleIcon(\r\n               require(\"../../../assets/images/map_marker.png\"),\r\n               [48, 48]\r\n            )}\r\n         />\r\n      </DefaultMapView>\r\n   );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n   map: {\r\n      width: \"100%\",\r\n      height: \"100%\",\r\n      zIndex: 1,\r\n   },\r\n});\r\n\r\nexport default MapView;\r\n","import React from \"react\";\r\nimport { StyleSheet } from \"react-native\";\r\nimport { Text, View } from \"../../Themed\";\r\nimport MapView, { MapViewProps } from \"../elements/MapView\";\r\n\r\ntype Props = {} & MapViewProps;\r\n\r\nfunction Map({ region, mapViewRef, onPressMap }: Props) {\r\n   return (\r\n      <View style={styles.container}>\r\n         <View style={styles.labelContainer}>\r\n            <Text style={styles.label}>\r\n               지도를 클릭해서 위치를 선택해주세요.\r\n            </Text>\r\n         </View>\r\n         <MapView\r\n            region={region}\r\n            mapViewRef={mapViewRef}\r\n            onPressMap={onPressMap}\r\n         />\r\n      </View>\r\n   );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n   container: {\r\n      flex: 1,\r\n   },\r\n   labelContainer: {\r\n      height: 70,\r\n      justifyContent: \"center\",\r\n   },\r\n   label: {\r\n      fontSize: 16,\r\n      margin: 10,\r\n   },\r\n});\r\n\r\nexport default React.memo(Map);\r\n","import React from \"react\";\r\nimport { FlatList, StyleSheet } from \"react-native\";\r\nimport { WEB_REPORT_CONTENT_WIDTH } from \"../../../constants/Size\";\r\nimport useLayout, { LayoutType } from \"../../../hooks/useLayout\";\r\nimport { View } from \"../../Themed\";\r\nimport NaviButtons from \"../elements/naviButtons\";\r\nimport StepIndicator from \"../elements/StepIndicator\";\r\nimport { ReportViewProps } from \"../types\";\r\nimport Complete from \"./Complete\";\r\nimport Info from \"./Info\";\r\nimport Map from \"./Map\";\r\n\r\nfunction Report({\r\n   region,\r\n   mapViewRef,\r\n   pagerRef,\r\n   position,\r\n   locationType,\r\n   settingLocationType,\r\n   selectPhoto,\r\n   photo,\r\n   sendRequest,\r\n   addPhoto,\r\n   settingAddPhoto,\r\n   goNext,\r\n   goPrev,\r\n   onPressMap,\r\n   gotoHome,\r\n   gotoReport,\r\n}: ReportViewProps) {\r\n   const layout = useLayout();\r\n\r\n   // 각 페이지에 보여줄 화면 배열\r\n   const contentArray = [\r\n      <Map region={region} mapViewRef={mapViewRef} onPressMap={onPressMap} />,\r\n      <Info\r\n         locationType={locationType}\r\n         settingLocationType={settingLocationType}\r\n         selectPhoto={selectPhoto}\r\n         photo={photo}\r\n         sendRequest={sendRequest}\r\n         addPhoto={addPhoto}\r\n         settingAddPhoto={settingAddPhoto}\r\n      />,\r\n      <Complete gotoHome={gotoHome} gotoReport={gotoReport} />,\r\n   ];\r\n\r\n   return (\r\n      <View style={{ flex: 1 }}>\r\n         <View style={{ alignItems: \"center\" }}>\r\n            <StepIndicator position={position} />\r\n         </View>\r\n         <FlatList\r\n            ref={pagerRef}\r\n            initialScrollIndex={0}\r\n            horizontal={true}\r\n            data={contentArray}\r\n            keyExtractor={(item, index) => `flaylist_content_${index}`}\r\n            scrollEnabled={false}\r\n            showsHorizontalScrollIndicator={false}\r\n            renderItem={({ item, index }) => (\r\n               <View\r\n                  key={`flaylist_content_${index}`}\r\n                  style={[stylesFunc(layout).pagerChildCaontainer]}>\r\n                  <View style={stylesFunc(layout).pageChildInside}>{item}</View>\r\n               </View>\r\n            )}\r\n         />\r\n         <View style={{ alignItems: \"center\" }}>\r\n            <View style={[stylesFunc(layout).pageChildInside, { height: 60 }]}>\r\n               {position !== 2 && (\r\n                  <NaviButtons\r\n                     position={position}\r\n                     last={position === 1}\r\n                     goNext={goNext}\r\n                     goPrev={goPrev}\r\n                  />\r\n               )}\r\n            </View>\r\n         </View>\r\n      </View>\r\n   );\r\n}\r\nconst stylesFunc = ({ window: { width }, isSmallDevice }: LayoutType) =>\r\n   StyleSheet.create({\r\n      pagerChildCaontainer: {\r\n         width: width,\r\n         height: \"100%\",\r\n         alignItems: \"center\",\r\n         justifyContent: \"center\",\r\n      },\r\n      pageChildInside: {\r\n         width: isSmallDevice ? width : WEB_REPORT_CONTENT_WIDTH,\r\n         height: \"100%\",\r\n         overflow: \"hidden\",\r\n      },\r\n   });\r\n\r\nexport default Report;\r\n","// web 환경에서 사용되는 Alert\r\nexport default function Alert(\r\n   title: string,\r\n   desc: string,\r\n   onNegativePress = () => {},\r\n   onPositivePress = () => {}\r\n) {\r\n   let res;\r\n   if (title) {\r\n      res = window.confirm(`${title}\\n${desc}`);\r\n   } else {\r\n      res = window.confirm(`${desc}`);\r\n   }\r\n   if (res) onPositivePress();\r\n   else onNegativePress();\r\n}\r\n","//서버 주소입니다.\nexport const ADDRESS: string = \"https://www.stmap.kro.kr/api\";\n","import axios from \"axios\";\nimport { LocationType } from \"../types\";\nimport { ADDRESS } from \"./address\";\n\n// 요청 보내기\nexport const sendRequestApi = async (item: {\n   type: LocationType;\n   latitude: number;\n   longitude: number;\n   image: string | null | undefined;\n}) => {\n   try {\n      await axios.post(`${ADDRESS}/product/register/request`, item);\n   } catch (e) {\n      throw e;\n   }\n};\n","import React, { useCallback, useRef, useState } from \"react\";\r\nimport { FlatList } from \"react-native\";\r\nimport MapView, { Region } from \"react-native-maps\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { deltas } from \"../../../constants/Constants\";\r\nimport { RootState } from \"../../../modules\";\r\nimport { loading, unloading } from \"../../../modules/loading\";\r\nimport { setSnackbar } from \"../../../modules/snackbar\";\r\nimport {\r\n   CoordType,\r\n   ImageLibraryReturn,\r\n   LocationType,\r\n   RootStackScreenProps,\r\n   SMOKE,\r\n} from \"../../../types\";\r\nimport Report from \"../view/Report\";\r\nimport * as ImagePicker from \"expo-image-picker\";\r\nimport Alert from \"../../elements/Alert\";\r\nimport { changePhotoContent } from \"../../../constants/Strings\";\r\nimport { sendRequestApi } from \"../../../api/requestList\";\r\n\r\nfunction ReportContainer({ navigation }: RootStackScreenProps<\"Report\">) {\r\n   const [position, setPosition] = useState<number>(0); // 현재 페이지\r\n   const mapViewRef = useRef<MapView>() as React.RefObject<MapView>; // 지도 reference\r\n   const pagerRef = useRef<FlatList>() as React.RefObject<FlatList>; // 페이지 reference\r\n   const myLocation = useSelector(({ myLocation }: RootState) => myLocation); // 현재 유저의 위치\r\n   const [locationType, setLocationType] = useState<LocationType>(SMOKE); // 유저가 고른 location type\r\n   const [photo, setPhoto] = useState<ImageLibraryReturn>(null); // 유저가 고른 사진\r\n   const [prevPhoto, setPrevPhoto] = useState<ImageLibraryReturn>(null); // 유저가 사진을 변경했을시, 변경 전 사진\r\n   const [addPhoto, setAddPhoto] = useState(false); // 사진을 넣었는지 안넣었는지\r\n\r\n   const [region, setRegion] = useState<Region>(myLocation.region); // 현재 지도의 중심\r\n   const dispatch = useDispatch();\r\n\r\n   // 두번째 페이지에서 사용되는 location type 설정 함수\r\n   const settingLocationType = (v: LocationType) => {\r\n      setLocationType(v);\r\n   };\r\n\r\n   // 사진 등록/미등록 여부 설정 함수\r\n   const settingAddPhoto = (v: boolean) => {\r\n      setAddPhoto(v);\r\n   };\r\n\r\n   // 사진 고르기\r\n   const pickPhoto = async () => {\r\n      // 권한 얻기\r\n      let res = await ImagePicker.getMediaLibraryPermissionsAsync();\r\n      if (!res.granted) {\r\n         res = await ImagePicker.requestMediaLibraryPermissionsAsync(false);\r\n         if (!res.granted) {\r\n            return;\r\n         }\r\n      }\r\n\r\n      // 사진 얻기\r\n      let result = await ImagePicker.launchImageLibraryAsync({\r\n         mediaTypes: ImagePicker.MediaTypeOptions.Images,\r\n         allowsEditing: true,\r\n         aspect: [4, 3],\r\n         quality: 0.5,\r\n         base64: true,\r\n      });\r\n\r\n      // 취소 됐으면 이전 사진을, 아니면 결과를 넣는다.\r\n      if (!result.cancelled) {\r\n         // 프로필 사진 수정\r\n         setPhoto(result);\r\n      } else {\r\n         setPhoto(prevPhoto);\r\n      }\r\n   };\r\n\r\n   // 유저가 사진 등록버튼을 눌렀을때, 이전에 선택된 사진이 있으면 변경할 것인지 묻기\r\n   const selectPhoto = async (v: boolean) => {\r\n      if (!photo) {\r\n         await pickPhoto();\r\n      } else if (v) {\r\n         Alert(\r\n            \"\",\r\n            changePhotoContent,\r\n            () => {},\r\n            () => {\r\n               pickPhoto();\r\n               setPrevPhoto(photo);\r\n               setPhoto(null);\r\n            }\r\n         );\r\n      }\r\n   };\r\n   /**\r\n    * 페이지 스크롤 함수\r\n    */\r\n   const scrollToIndex = (to: number) => {\r\n      pagerRef.current?.scrollToIndex({\r\n         index: to,\r\n         animated: true,\r\n         viewPosition: 0,\r\n      });\r\n      setPosition(to);\r\n   };\r\n\r\n   // 추가 요청 서버로 보내기.\r\n   const sendRequest = async () => {\r\n      dispatch(loading());\r\n      try {\r\n         const obj = {\r\n            type: locationType,\r\n            latitude: region.latitude,\r\n            longitude: region.longitude,\r\n            image: addPhoto ? photo?.base64 : null,\r\n         };\r\n\r\n         await sendRequestApi(obj);\r\n         // 서버 요청\r\n         goNext();\r\n      } catch (e) {\r\n         // 요청 실패시 snackbar로 안내.\r\n         dispatch(setSnackbar(\"요청에 실패했습니다. 다시 시도해주세요.\"));\r\n      }\r\n      dispatch(unloading());\r\n   };\r\n\r\n   // 메인 화면으로 이동\r\n   const gotoHome = () => {\r\n      scrollToIndex(0);\r\n      navigation.navigate(\"Main\");\r\n   };\r\n\r\n   // 초기 추가요청 화면으로 이동 및 초기화\r\n   const gotoReport = () => {\r\n      // 초기화\r\n      setPhoto(null);\r\n      setAddPhoto(false);\r\n      setLocationType(SMOKE);\r\n      // 이동\r\n      scrollToIndex(0);\r\n   };\r\n\r\n   /**\r\n    * 다음 페이지, 이전 페이지 이동 함수\r\n    */\r\n   const goNext = useCallback((): void => {\r\n      scrollToIndex(position + 1);\r\n   }, [pagerRef, position]);\r\n   const goPrev = useCallback((): void => {\r\n      scrollToIndex(position - 1);\r\n   }, [pagerRef, position]);\r\n\r\n   // 지도를 눌렀을때 그쪽으로 이동 및 region 세팅 함수.\r\n   // 웹일 경우 animateToRegion이 작동하지 않아, 애니메이션없이 세팅만 해준다.\r\n   const onPressMap = (coordinate: CoordType) => {\r\n      setRegion({ ...coordinate, ...deltas });\r\n   };\r\n\r\n   return (\r\n      <Report\r\n         region={region}\r\n         mapViewRef={mapViewRef}\r\n         pagerRef={pagerRef}\r\n         position={position}\r\n         locationType={locationType}\r\n         photo={photo}\r\n         addPhoto={addPhoto}\r\n         selectPhoto={selectPhoto}\r\n         settingLocationType={settingLocationType}\r\n         settingAddPhoto={settingAddPhoto}\r\n         sendRequest={sendRequest}\r\n         goNext={goNext}\r\n         goPrev={goPrev}\r\n         onPressMap={onPressMap}\r\n         gotoReport={gotoReport}\r\n         gotoHome={gotoHome}\r\n      />\r\n   );\r\n}\r\n\r\nexport default ReportContainer;\r\n","import * as React from \"react\";\nimport ReportContainer from \"../components/report/container/ReportContainer\";\nimport { RootStackScreenProps } from \"../types\";\n\nexport default function ReportScreen(props: RootStackScreenProps<\"Report\">) {\n   return <ReportContainer {...props} />;\n}\n","import * as React from \"react\";\nimport { StyleSheet, Text, TouchableOpacity, View } from \"react-native\";\n\nimport { RootStackScreenProps } from \"../types\";\n\nexport default function NotFoundScreen({\n   navigation,\n}: RootStackScreenProps<\"NotFound\">) {\n   return (\n      <View style={styles.container}>\n         <Text style={styles.title}>존재하지 않는 페이지입니다.</Text>\n         <TouchableOpacity\n            onPress={() => navigation.replace(\"Main\")}\n            style={styles.link}>\n            <Text style={styles.linkText}>메인화면으로 이동</Text>\n         </TouchableOpacity>\n      </View>\n   );\n}\n\nconst styles = StyleSheet.create({\n   container: {\n      flex: 1,\n      backgroundColor: \"#fff\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      padding: 20,\n   },\n   title: {\n      fontSize: 20,\n      fontWeight: \"bold\",\n   },\n   link: {\n      marginTop: 15,\n      paddingVertical: 15,\n   },\n   linkText: {\n      fontSize: 14,\n      color: \"#2e78b7\",\n   },\n});\n","import { CoordType } from \"../types\";\r\n\r\n// 두 좌표 사이의 유클리디안 거리의 제곱을 계산(루트를 하지 않음)\r\nexport default function calculateEuclidean(a: CoordType, b: CoordType) {\r\n   return (\r\n      Math.pow(Math.abs(a.latitude - b.latitude), 2) +\r\n      Math.pow(Math.abs(a.longitude - b.longitude), 2)\r\n   );\r\n}\r\n","/**\r\n * 두 Region 또는 좌표가 같은지 확인하는 함수\r\n */\r\n\r\nimport { Region } from \"react-native-maps\";\r\nimport { CoordType } from \"../types\";\r\n\r\nexport default function isTwoRegionSame(\r\n   one: Region | CoordType,\r\n   two: Region | CoordType\r\n) {\r\n   if (one.latitude === two.latitude && one.longitude === two.longitude) {\r\n      return true;\r\n   }\r\n   return false;\r\n}\r\n","import React from \"react\";\r\nimport { StyleSheet } from \"react-native\";\r\nimport { FLOATING_BUTTON_WIDTH } from \"../../../constants/Size\";\r\nimport {\r\n   Button,\r\n   SpeedDial,\r\n   ThemedButtonProps,\r\n   ThemedSpeedDialProps,\r\n} from \"../../Themed\";\r\n\r\n// 좌측 하단 floating button 스타일 적용을 위한 한번 더 감싸기\r\nexport function FloatingButton({ color, ...otherProps }: ThemedButtonProps) {\r\n   return (\r\n      <Button\r\n         containerStyle={styles.buttonContainer}\r\n         buttonStyle={[styles.buttonStyle]}\r\n         color={color}\r\n         raised\r\n         {...otherProps}\r\n      />\r\n   );\r\n}\r\n\r\n// 우측 하단 speedDial 스타일 적용을 위한 한번 더 감싸기\r\nexport function CustomSpeedDial({\r\n   color,\r\n   actions,\r\n   buttonStyle,\r\n   containerStyle,\r\n   ...otherProps\r\n}: ThemedSpeedDialProps) {\r\n   return (\r\n      <SpeedDial\r\n         buttonStyle={[styles.buttonStyle, buttonStyle]}\r\n         containerStyle={[styles.buttonContainer, containerStyle]}\r\n         color={color}\r\n         actions={actions?.map((item) => ({\r\n            ...item,\r\n            containerStyle: [styles.actionButtonContainer, item.containerStyle],\r\n            buttonStyle: [styles.actionButtonStyle, item.buttonStyle],\r\n         }))}\r\n         raised\r\n         {...otherProps}\r\n      />\r\n   );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n   buttonContainer: {\r\n      width: FLOATING_BUTTON_WIDTH,\r\n      height: FLOATING_BUTTON_WIDTH,\r\n      borderRadius: 30,\r\n      overflow: \"hidden\",\r\n   },\r\n   buttonStyle: {\r\n      width: FLOATING_BUTTON_WIDTH,\r\n      height: FLOATING_BUTTON_WIDTH,\r\n      borderRadius: 30,\r\n   },\r\n   actionButtonContainer: {\r\n      width: FLOATING_BUTTON_WIDTH - 5,\r\n      height: FLOATING_BUTTON_WIDTH - 5,\r\n      borderRadius: 30,\r\n      overflow: \"hidden\",\r\n   },\r\n   actionButtonStyle: {\r\n      width: FLOATING_BUTTON_WIDTH - 5,\r\n      height: FLOATING_BUTTON_WIDTH - 5,\r\n      borderRadius: 30,\r\n   },\r\n});\r\n","import React from \"react\";\r\nimport { StyleSheet } from \"react-native\";\r\nimport Colors from \"../../../constants/Colors\";\r\nimport { FLOATING_BUTTON_WIDTH } from \"../../../constants/Size\";\r\nimport { View } from \"../../Themed\";\r\nimport { FloatingButton } from \"./CustomButtons\";\r\n\r\ntype Props = {\r\n   goToReport: () => void;\r\n   animateToClosest?: () => void;\r\n};\r\n\r\nfunction LeftBottomButtons({ goToReport, animateToClosest }: Props) {\r\n   return (\r\n      <View style={[styles.buttonCol, { left: 0 }]}>\r\n         <FloatingButton\r\n            color={Colors.colorSet.stRed}\r\n            icon={{\r\n               name: \"location-arrow\",\r\n               type: \"font-awesome\",\r\n               color: \"white\",\r\n            }}\r\n            onPress={animateToClosest}\r\n         />\r\n         <FloatingButton\r\n            color={Colors.colorSet.stBlue}\r\n            icon={{\r\n               name: \"plus\",\r\n               type: \"font-awesome\",\r\n               color: \"white\",\r\n            }}\r\n            onPress={goToReport}\r\n         />\r\n      </View>\r\n   );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n   buttonCol: {\r\n      position: \"absolute\",\r\n      bottom: 10,\r\n      height: FLOATING_BUTTON_WIDTH * 2 + 20,\r\n      backgroundColor: \"transparent\",\r\n      justifyContent: \"space-around\",\r\n      paddingLeft: 20,\r\n      paddingRight: 20,\r\n      zIndex: 1,\r\n   },\r\n});\r\n\r\nexport default LeftBottomButtons;\r\n","import React from \"react\";\r\nimport Colors from \"../../../constants/Colors\";\r\nimport { smokingPlace, trashcan } from \"../../../constants/Strings\";\r\nimport { LocationType, SMOKE, TRASHCAN } from \"../../../types\";\r\nimport { CustomSpeedDial } from \"./CustomButtons\";\r\n\r\ntype Props = {\r\n   isOpen: boolean;\r\n   locationType: LocationType;\r\n   toggleIsOpen: () => void;\r\n   changeLocationType: (v: LocationType) => void;\r\n};\r\n\r\nfunction RightBottomSpeedDial({\r\n   isOpen,\r\n   locationType,\r\n   toggleIsOpen,\r\n   changeLocationType,\r\n}: Props) {\r\n   return (\r\n      <CustomSpeedDial\r\n         isOpen={isOpen}\r\n         icon={{ name: locationType, color: \"#fff\", type: \"font-awesome-5\" }}\r\n         openIcon={{ name: \"close\", color: \"#fff\" }}\r\n         onOpen={toggleIsOpen}\r\n         onClose={toggleIsOpen}\r\n         color={Colors.colorSet.stGray}\r\n         actions={[\r\n            {\r\n               icon: {\r\n                  name: \"smoking\",\r\n                  color: \"#fff\",\r\n                  type: \"font-awesome-5\",\r\n               },\r\n               title: smokingPlace,\r\n               onPress: () => changeLocationType(SMOKE),\r\n            },\r\n            {\r\n               icon: {\r\n                  name: \"trash\",\r\n                  color: \"#fff\",\r\n                  type: \"font-awesome-5\",\r\n               },\r\n               title: trashcan,\r\n               onPress: () => changeLocationType(TRASHCAN),\r\n            },\r\n         ]}\r\n      />\r\n   );\r\n}\r\n\r\nexport default RightBottomSpeedDial;\r\n","import React from \"react\";\r\nimport { StyleSheet } from \"react-native\";\r\nimport MapView, { Marker, Region } from \"react-native-maps\";\r\nimport { deltas } from \"../../../constants/Constants\";\r\nimport { MyLocationType } from \"../../../modules/myLocation\";\r\nimport {\r\n   AnimateRegionType,\r\n   CoordType,\r\n   LocationType,\r\n   MarkerType,\r\n} from \"../../../types\";\r\nimport isTwoRegionSame from \"../../../utils/isTwoRegionSame\";\r\nimport makeGoogleIcon from \"../../../utils/makeGoogleIcon\";\r\nimport { View } from \"../../Themed\";\r\nimport LeftBottomButtons from \"../elements/LeftBottomButtons\";\r\nimport RightBottomSpeedDial from \"../elements/RightBottomSpeedDial\";\r\n\r\ntype Props = {\r\n   mapViewRef: React.RefObject<MapView>;\r\n   markers: MarkerType[] | undefined;\r\n   region: Region;\r\n   markerImages: any | undefined;\r\n   myLocation: MyLocationType;\r\n   locationType: LocationType;\r\n   isOpen: boolean;\r\n   toggleIsOpen: () => void;\r\n   changeLocationType: (v: LocationType) => void;\r\n   onPressMarker: (v: CoordType) => void;\r\n   onAnimateRegion: AnimateRegionType;\r\n   goToReport: () => void;\r\n   animateToClosest: () => void;\r\n};\r\n\r\nfunction Main({\r\n   mapViewRef,\r\n   markers,\r\n   region,\r\n   markerImages,\r\n   myLocation,\r\n   locationType,\r\n   isOpen,\r\n   toggleIsOpen,\r\n   changeLocationType,\r\n   onPressMarker,\r\n   onAnimateRegion,\r\n   goToReport,\r\n   animateToClosest,\r\n}: Props) {\r\n   return (\r\n      <View style={{ flex: 1 }}>\r\n         <View style={styles.container}>\r\n            <MapView\r\n               key=\"Gmap\"\r\n               ref={mapViewRef}\r\n               region={region}\r\n               style={styles.map}\r\n               defaultZoom={18}\r\n               options={{ disableDefaultUI: true }}\r\n               onRegionChangeComplete={(v) => {\r\n                  onAnimateRegion({ ...v, ...deltas });\r\n               }}\r\n               onPress={() => {\r\n                  /**\r\n                   * 웹에서는 callout이 안되어 등록된 사진을 보여줄때\r\n                   * 현재 region과 marker의 위치가 같으면 사진을 보여주는데\r\n                   * 사진을 닫기 위해서는 지도를 이동시켜야함.\r\n                   * 이는 불편하므로, 지도의 아무곳이나 클릭했을떄\r\n                   * 티나지 않을만큼 아주 조금만 위도를 이동시켜 사진을 닫게한다.\r\n                   */\r\n                  onAnimateRegion({\r\n                     ...region,\r\n                     latitude: region.latitude - 0.0000000000001,\r\n                  });\r\n               }}>\r\n               {\r\n                  // 유저 위치에 마커 보여주기. 학교 밖이면 보여주지 않음.\r\n                  // 웹에서는 누르면 그 곳으로 지도의 중심을 이동하도록 onPress 이벤트를 등록함\r\n                  markerImages && myLocation.isInside && (\r\n                     <Marker\r\n                        key=\"marker_user\"\r\n                        coordinate={myLocation.region}\r\n                        icon={makeGoogleIcon(markerImages[\"user\"], [48, 48])}\r\n                        onPress={(v) =>\r\n                           onPressMarker({\r\n                              latitude: v?.latLng?.lat(),\r\n                              longitude: v?.latLng?.lng(),\r\n                           })\r\n                        }\r\n                     />\r\n                  )\r\n               }\r\n               {\r\n                  // marker.filter() 를 통해 현재 보여줄 타입의 마커만 보여줌.\r\n                  markerImages &&\r\n                     markers\r\n                        ?.filter(\r\n                           (marker: MarkerType) => marker.type === locationType\r\n                        )\r\n                        .map((item: MarkerType, idx: number) => (\r\n                           <Marker\r\n                              key={`marker_${idx}`}\r\n                              coordinate={item.coords}\r\n                              icon={\r\n                                 // 현재 center와 marker가 같다면 등록된 이미지를 보여줌.\r\n                                 // 등록된 이미지가 없으면 마커를 보여준다\r\n                                 isTwoRegionSame(region, item.coords) &&\r\n                                 item.image\r\n                                    ? makeGoogleIcon(item.image, [400, 300])\r\n                                    : makeGoogleIcon(\r\n                                         markerImages[`${locationType}`],\r\n                                         [48, 48]\r\n                                      )\r\n                              }\r\n                              onPress={(v) =>\r\n                                 onPressMarker({\r\n                                    latitude: v?.latLng?.lat(),\r\n                                    longitude: v?.latLng?.lng(),\r\n                                 })\r\n                              }\r\n                           />\r\n                        ))\r\n               }\r\n            </MapView>\r\n            <LeftBottomButtons\r\n               goToReport={goToReport}\r\n               animateToClosest={animateToClosest}\r\n            />\r\n         </View>\r\n         <RightBottomSpeedDial\r\n            isOpen={isOpen}\r\n            locationType={locationType}\r\n            toggleIsOpen={toggleIsOpen}\r\n            changeLocationType={changeLocationType}\r\n         />\r\n      </View>\r\n   );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n   container: {\r\n      flex: 1,\r\n      alignItems: \"center\",\r\n      justifyContent: \"center\",\r\n   },\r\n   map: {\r\n      width: \"100%\",\r\n      height: \"100%\",\r\n      zIndex: 1,\r\n   },\r\n});\r\n\r\nexport default Main;\r\n","import React, { useCallback, useEffect, useRef, useState } from \"react\";\r\nimport MapView, { Region } from \"react-native-maps\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { deltas } from \"../../../constants/Constants\";\r\nimport { RootState } from \"../../../modules\";\r\nimport {\r\n   CoordType,\r\n   LocationType,\r\n   MarkerType,\r\n   RootStackScreenProps,\r\n   SMOKE,\r\n   TRASHCAN,\r\n} from \"../../../types\";\r\nimport calculateEuclidean from \"../../../utils/calculateEuclidean\";\r\nimport isTwoRegionSame from \"../../../utils/isTwoRegionSame\";\r\nimport Main from \"../view/Main\";\r\n\r\nfunction MainContainer({ navigation }: RootStackScreenProps<\"Main\">) {\r\n   const [locationType, setLocationType] = useState<LocationType>(SMOKE); // 보여줄 마커 타입. 흡연장소 또는 쓰레기통\r\n   const [markerImages, setMarkerImages] = useState<any>(); // 마커 이미지들\r\n   const mapViewRef = useRef<MapView>() as React.RefObject<MapView>; // 지도 reference\r\n   const markers = useSelector(({ markers }: RootState) => markers); // 리덕스에 저장된 마커 불러들이기\r\n   const myLocation = useSelector(({ myLocation }: RootState) => myLocation); // 현재 유저의 위치\r\n   const [isOpen, setIsOpen] = useState<boolean>(false); // 오른쪽 하단 speedDial이 열려있는지 닫혀있는지\r\n\r\n   const [region, setRegion] = useState<Region>(myLocation.region); // 화면 중심 region\r\n\r\n   /**\r\n    * 현재 유저의 좌표가 학교 중심좌표에서 0.007 이상 벗어난 위도 경도면 학교 중심을,\r\n    * 아니면 본인위치를 보여주기\r\n    */\r\n   useEffect(() => {\r\n      const mainInit = async () => {\r\n         // 마커 이미지 로드.\r\n         let obj: any = {};\r\n         obj[\"user\"] = require(`../../../assets/images/map_marker_user.png`);\r\n         obj[\r\n            `${SMOKE}`\r\n         ] = require(`../../../assets/images/map_marker_smoking.png`);\r\n         obj[\r\n            `${TRASHCAN}`\r\n         ] = require(`../../../assets/images/map_marker_trash.png`);\r\n\r\n         setMarkerImages(obj);\r\n      };\r\n      mainInit();\r\n   }, []);\r\n\r\n   useEffect(() => {\r\n      if (myLocation.isInside) {\r\n         setRegion(myLocation.region);\r\n      }\r\n   }, [myLocation, mapViewRef]);\r\n\r\n   /**\r\n    *  지도의 중심과 이 파일에서 관리하는 region의 상태를 일치시키기 위한 함수\r\n    *\r\n    *\r\n    *  region(지도 중심) 이동이 완료되었을 때 호출되는 이벤트인\r\n    *  onRegionChangeComplete의 콜백함수로 활용.\r\n    *\r\n    *  웹에서는 이미지를 닫기 위해 사용되기도 함.\r\n    *\r\n    *  앱에서는 동작이 불안정하여 사용하지 않음\r\n    */\r\n   const onAnimateRegion = (reg: Region) => {\r\n      if (!isTwoRegionSame(reg, region)) {\r\n         setRegion(reg);\r\n      }\r\n   };\r\n   // 좌측 아래 + 버튼 눌렀을때 호출. 추가요청 페이지로 가기\r\n   const goToReport = () => {\r\n      navigation.navigate(\"Report\");\r\n   };\r\n\r\n   const onPressMarker = (coord: CoordType) => {\r\n      mapViewRef.current?.animateToRegion(\r\n         {\r\n            ...coord,\r\n            ...deltas,\r\n         },\r\n         1000\r\n      );\r\n   };\r\n   // 좌측 아래 버튼 중 위 버튼을 눌렀을때 호출.\r\n   // 현재 유저 위치 또는 학교중심에서 가장 가까운 marker로 지도 이동\r\n   const animateToClosest = () => {\r\n      if (markers && myLocation) {\r\n         const center = myLocation.region;\r\n         const curType = markers.filter(\r\n            (marker: MarkerType) => marker.type === locationType\r\n         );\r\n         let closestRegion = curType.length > 0 ? curType[0].coords : center;\r\n         let minLength = calculateEuclidean(center, closestRegion);\r\n         curType.forEach((item) => {\r\n            const curLength = calculateEuclidean(item.coords, center);\r\n            if (curLength < minLength) {\r\n               minLength = curLength;\r\n               closestRegion = item.coords;\r\n            }\r\n         });\r\n\r\n         const reg = {\r\n            ...closestRegion,\r\n            ...deltas,\r\n         };\r\n         mapViewRef.current?.animateToRegion(reg, 1000);\r\n         setTimeout(() => setRegion(reg), 1000);\r\n      }\r\n   };\r\n\r\n   // 우측하단 speedDial 버튼 열기 닫기 함수\r\n   const toggleIsOpen = useCallback(() => {\r\n      setIsOpen((prev) => !prev);\r\n   }, []);\r\n   // speedDial 을 열었을 때 나오는 버튼을 눌렀을 때 호출됨. 보여줄 marker를 바꿈\r\n   const changeLocationType = (v: LocationType) => {\r\n      setLocationType(v);\r\n      setIsOpen(false);\r\n   };\r\n\r\n   return (\r\n      <Main\r\n         myLocation={myLocation}\r\n         markers={markers}\r\n         markerImages={markerImages}\r\n         region={region}\r\n         mapViewRef={mapViewRef}\r\n         locationType={locationType}\r\n         isOpen={isOpen}\r\n         toggleIsOpen={toggleIsOpen}\r\n         changeLocationType={changeLocationType}\r\n         onPressMarker={onPressMarker}\r\n         onAnimateRegion={onAnimateRegion}\r\n         goToReport={goToReport}\r\n         animateToClosest={animateToClosest}\r\n      />\r\n   );\r\n}\r\n\r\nexport default MainContainer;\r\n","import React from \"react\";\nimport MainContainer from \"../components/main/container/MainContainer\";\nimport { RootStackScreenProps } from \"../types\";\n\nexport default function MainScreen(props: RootStackScreenProps<\"Main\">) {\n   return <MainContainer {...props} />;\n}\n","import React, { useState, useEffect } from \"react\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { Switch as DefaultSwitch } from \"react-native-elements\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { RootState } from \"../../modules\";\nimport { setTheme } from \"../../modules/theme\";\nimport { DARK, LIGHT, ThemeScheme } from \"../../types\";\nimport { View } from \"../Themed\";\n\n/**\n * 다크모드-라이트모드 변경을 위한 스위치 element\n */\nexport default function Switch() {\n   // 다크모드일경우 false\n   const [value, setValue] = useState(true);\n   const theme = useSelector(({ theme }: RootState) => theme);\n   const dispatch = useDispatch();\n\n   useEffect(() => {\n      // 초기 상태가 다크모드일경우 value를 false로.\n      if (theme === DARK) {\n         setValue(false);\n      }\n   }, []);\n\n   // 유저가 스위치를 눌러서 모드 변경 시 redux는 물론, 로컬스토리지에서의 값도 변경\n   const onPress = async (v: boolean) => {\n      setValue(v);\n      let theme: ThemeScheme = LIGHT;\n      if (!v) {\n         theme = DARK;\n      }\n      await AsyncStorage.setItem(\"theme\", theme);\n      dispatch(setTheme(theme));\n   };\n\n   return (\n      <View style={{ backgroundColor: \"transparent\", width: 50 }}>\n         <DefaultSwitch value={value} onValueChange={onPress} />\n      </View>\n   );\n}\n","import { LinkingOptions } from \"@react-navigation/native\";\n\nimport { RootStackParamList } from \"../types\";\n\nconst linking: LinkingOptions<RootStackParamList> = {\n   prefixes: [\"https://aw-locatec.github.io\"],\n   config: {\n      screens: {\n         Main: \"locatec-main-front/\",\n         Report: \"locatec-main-front/report\",\n         NotFound: \"locatec-main-front/notfound\",\n      },\n   },\n};\n\nexport default linking;\n","import React from \"react\";\nimport {\n   NavigationContainer,\n   DefaultTheme,\n   DarkTheme,\n} from \"@react-navigation/native\";\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\n\nimport ReportScreen from \"../screens/ReportScreen\";\nimport NotFoundScreen from \"../screens/NotFoundScreen\";\nimport MainScreen from \"../screens/MainScreen\";\n\nimport {\n   DARK,\n   RootStackParamList,\n   RootStackScreenProps,\n   ThemeScheme,\n} from \"../types\";\nimport { appName } from \"../constants/Strings\";\nimport Switch from \"../components/elements/Switch\";\nimport { Icon } from \"../components/Themed\";\nimport { isWeb } from \"../constants/Constants\";\nimport linking from \"./LinkingConfiguration\";\n\nconst Stack = createNativeStackNavigator<RootStackParamList>();\n\n/**\n * 총 세 화면으로 구성\n * Main : 처음 화면. 지도와 세개의 버튼을 보여줌.\n *    오른쪽 상단엔 다크모드로 전환할 수 있는 스위치 렌더\n *\n * NotFound : 잘못 접근했을 경우 보여주는 페이지\n *\n * Report : 추가 요청을 보내기위한 페이지\n *  */\n\nexport default function Navigation({\n   colorScheme,\n}: {\n   colorScheme: ThemeScheme;\n}) {\n   return (\n      <NavigationContainer\n         theme={colorScheme === DARK ? DarkTheme : DefaultTheme}\n         linking={linking}>\n         <Stack.Navigator>\n            <Stack.Screen\n               name=\"Main\"\n               component={MainScreen}\n               options={() => ({\n                  title: appName,\n                  headerRight: () => <Switch />, // 메인화면에서 오른쪽 상단에 다크모드 전환을 위한 스위치 렌더\n               })}\n            />\n            <Stack.Screen\n               name=\"NotFound\"\n               component={NotFoundScreen}\n               options={{ title: \"여긴 어디?\" }}\n            />\n            <Stack.Screen\n               name=\"Report\"\n               component={ReportScreen}\n               options={({ navigation }: RootStackScreenProps<\"Report\">) => ({\n                  title: \"추가 요청\",\n                  headerTitleStyle: { fontFamily: \"notosans\" },\n                  headerLeft: () => (\n                     <Icon\n                        name=\"arrow-back\"\n                        onPress={() => navigation.navigate(\"Main\")}\n                        containerStyle={{\n                           marginRight: isWeb ? 0 : 10,\n                           marginLeft: isWeb ? 10 : 0,\n                        }}\n                        size={24}\n                     />\n                  ),\n               })}\n            />\n         </Stack.Navigator>\n      </NavigationContainer>\n   );\n}\n","import AnimatedLottieView from \"lottie-react-native\";\nimport React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { RootState } from \"../../modules\";\nimport { View } from \"../Themed\";\n\nexport default function Loading() {\n   // 리덕스 store로부터 loading 상태 불러들이기.\n   const loading = useSelector(({ loading }: RootState) => loading);\n\n   // loading 중일땐 전체 꽉차는 로딩 화면을 보여줌.\n   return (\n      <>\n         {loading ? (\n            <View\n               style={{\n                  flex: 1,\n                  width: \"100%\",\n                  height: \"100%\",\n                  position: \"absolute\",\n                  zIndex: 10,\n                  backgroundColor: \"rgba(0,0,0,0.1)\",\n                  justifyContent: \"center\",\n                  alignItems: \"center\",\n               }}>\n               <AnimatedLottieView\n                  source={require(\"../../assets/animations/loading.json\")}\n                  autoPlay\n                  loop\n                  colorFilters={[\n                     {\n                        keypath: \"button\",\n                        color: \"#Ffffff\",\n                     },\n                     {\n                        keypath: \"Sending Loader\",\n                        color: \"#Ffffff\",\n                     },\n                  ]}\n                  style={{ width: 200, height: 200 }}\n               />\n            </View>\n         ) : (\n            <></>\n         )}\n      </>\n   );\n}\n","import * as Location from \"expo-location\";\r\nimport { Region } from \"react-native-maps\";\r\n\r\n/** expo-location 에서 관리하는 location 객체를\r\n * react-native-maps에서 사용하는 Region 객체로 바꿔주기위한 함수\r\n */\r\nexport const parseToRegion = (\r\n   location: Location.LocationObject | null | undefined\r\n): Region => {\r\n   return {\r\n      latitude: location?.coords.latitude || 0,\r\n      longitude: location?.coords.longitude || 0,\r\n      latitudeDelta: 0.005,\r\n      longitudeDelta: 0.005,\r\n   };\r\n};\r\n","/**\r\n * 현재 유저의 위치를 얻고, 지도에 활용하기 위해 Region 타입으로 바꿔서 리턴해줌\r\n */\r\n\r\nimport * as Location from \"expo-location\";\r\nimport { centerSchool } from \"../constants/Constants\";\r\nimport { INSIDE_SHCOOL } from \"../constants/Size\";\r\nimport { parseToRegion } from \"./parseLocation\";\r\n\r\nexport default async function getMyRegion() {\r\n   let { status } = await Location.requestForegroundPermissionsAsync();\r\n   if (status !== \"granted\") {\r\n      throw Error();\r\n   }\r\n\r\n   // 위치 불러오기 메소드가 불안정하여, 성공할때까지 반복.\r\n   // 50회 반복하면 실패로 도림\r\n   let location;\r\n   let locationSuccess = false;\r\n   let tryCount = 0;\r\n   while (!locationSuccess && tryCount < 50) {\r\n      try {\r\n         location = await Location.getCurrentPositionAsync({\r\n            accuracy: Location.Accuracy.High,\r\n         });\r\n         locationSuccess = true;\r\n      } catch (e) {\r\n         tryCount++;\r\n      }\r\n   }\r\n   const parsed = parseToRegion(location);\r\n\r\n   // 학교 중심을 중심으로 하는, 길이 0.014 의 정사각형 안에 있을 경우 학교 안이라고 판정\r\n   let isInside = false;\r\n   if (\r\n      parsed.latitude <= centerSchool.latitude + INSIDE_SHCOOL &&\r\n      parsed.longitude <= centerSchool.longitude + INSIDE_SHCOOL &&\r\n      parsed.latitude >= centerSchool.latitude - INSIDE_SHCOOL &&\r\n      parsed.longitude >= centerSchool.longitude - INSIDE_SHCOOL\r\n   ) {\r\n      isInside = true;\r\n   }\r\n   return { parsed, isInside };\r\n}\r\n","import axios from \"axios\";\nimport { ADDRESS } from \"./address\";\n\n// 전체 리스트 받기\nexport const getWholeListApi = async () => {\n   try {\n      const res = await axios.get(`${ADDRESS}/product/find/registered`);\n      return res.data.response;\n   } catch (e) {\n      throw e;\n   }\n};\n","import React, { useState, useEffect } from \"react\";\r\nimport * as Font from \"expo-font\";\r\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { setTheme } from \"./modules/theme\";\r\nimport { LIGHT, MarkerServerDataType } from \"./types\";\r\nimport { View, ViewProps } from \"./components/Themed\";\r\nimport { setMarkers } from \"./modules/markers\";\r\nimport getMyRegion from \"./utils/getMyRegion\";\r\nimport { deltas } from \"./constants/Constants\";\r\nimport { setMyLocation } from \"./modules/myLocation\";\r\nimport { getWholeListApi } from \"./api/wholeList\";\r\nimport { NO_DATA } from \"./api/serverError\";\r\nimport AppLoading from \"expo-app-loading\";\r\n\r\nfunction AppInit({ children }: ViewProps) {\r\n   const [isLoadingComplete, setLoadingComplete] = useState(false); // 로딩 상태\r\n   const dispatch = useDispatch(); // 리덕스 action 디스패치 함수\r\n\r\n   const loadResourcesAndDataAsync = async () => {\r\n      try {\r\n         // 폰트 로드\r\n         await Font.loadAsync({\r\n            notosans: require(\"./assets/fonts/NotoSansKR-Regular.otf\"),\r\n         });\r\n\r\n         // 테마 읽기.\r\n         let theme = await AsyncStorage.getItem(\"theme\");\r\n         if (!theme) {\r\n            await AsyncStorage.setItem(\"theme\", LIGHT);\r\n            theme = LIGHT;\r\n         }\r\n         dispatch(setTheme(theme));\r\n\r\n         // 위치 데이터 불러들이기.\r\n         const res = await getWholeListApi();\r\n         if (res !== NO_DATA) {\r\n            const processed = res.map((item: MarkerServerDataType) => ({\r\n               type: item.type,\r\n               coords: {\r\n                  latitude: parseFloat(item.latitude),\r\n                  longitude: parseFloat(item.longitude),\r\n               },\r\n               image: item.imageUrl,\r\n            }));\r\n            dispatch(setMarkers(processed));\r\n         }\r\n      } catch (e) {\r\n         console.log(e);\r\n      }\r\n   };\r\n\r\n   const onFinish = () => setLoadingComplete(true);\r\n\r\n   useEffect(() => {\r\n      // 로딩이 끝나면 현재 유저 위치 받기\r\n      const myLocation = async () => {\r\n         if (isLoadingComplete) {\r\n            try {\r\n               const ret = await getMyRegion();\r\n               // 학교 외부일경우 우리 앱에선 유저의 위치가 의미가 없으므로\r\n               // 안일때만 myLocation store에 저장함.\r\n               if (ret.isInside) {\r\n                  dispatch(\r\n                     setMyLocation({\r\n                        region: {\r\n                           latitude: ret.parsed.latitude,\r\n                           longitude: ret.parsed.longitude,\r\n                           ...deltas,\r\n                        },\r\n                        isInside: true,\r\n                     })\r\n                  );\r\n               }\r\n            } catch (e) {\r\n               console.log(e);\r\n            }\r\n         }\r\n      };\r\n      myLocation();\r\n   }, [isLoadingComplete]);\r\n\r\n   // 로딩 중일땐 AppLoading을 렌더.\r\n   // AppLoading은 startAsync 함수가 완료될때까지 splash 화면을 렌더한다.\r\n   // 완료시에는 onFinish를 호출하여 isLoadingComplete 상태를 true로 바꾼다.\r\n   if (!isLoadingComplete) {\r\n      return (\r\n         <AppLoading\r\n            startAsync={loadResourcesAndDataAsync}\r\n            onFinish={onFinish}\r\n            onError={console.warn}\r\n         />\r\n      );\r\n   }\r\n\r\n   return <View style={{ height: \"100%\", width: \"100%\" }}>{children}</View>;\r\n}\r\n\r\nexport default AppInit;\r\n","// 서버에서 넘어오는 에러메세지 정리\nexport const NO_DATA = \"product가 없습니다.\";\n","import { StatusBar } from \"expo-status-bar\";\r\nimport React from \"react\";\r\nimport { SafeAreaProvider } from \"react-native-safe-area-context\";\r\nimport { Provider, useDispatch, useSelector } from \"react-redux\";\r\nimport { applyMiddleware, createStore } from \"redux\";\r\nimport logger from \"redux-logger\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport rootReducer, { RootState } from \"./modules\";\r\nimport SnackBar from \"rn-animated-snackbar\";\r\nimport Navigation from \"./navigation\";\r\nimport Loading from \"./components/elements/Loading\";\r\nimport { clearSnackbar } from \"./modules/snackbar\";\r\nimport { DARK, LIGHT } from \"./types\";\r\nimport AppInit from \"./AppInit\";\r\n\r\n// 리덕스 사용\r\nconst store = createStore(\r\n   rootReducer,\r\n   composeWithDevTools(applyMiddleware(logger))\r\n);\r\n\r\n// 루트 앱. 전체 영역을 감싸고, 리덕스 Provider 적용.\r\n// 이 아래에선 리덕스 사용을 위해 RootApp과 App 분리\r\nexport default function RootApp() {\r\n   return (\r\n      <SafeAreaProvider style={{ flex: 1 }}>\r\n         <Provider store={store}>\r\n            <App />\r\n         </Provider>\r\n      </SafeAreaProvider>\r\n   );\r\n}\r\n\r\nexport function App() {\r\n   // 리덕스 store에서 theme 가져와서 navigation, statusBar에 적용.\r\n   const colorScheme = useSelector(({ theme }: RootState) => theme);\r\n   // 리덕스 store에서 snackbar 상태 가져오기\r\n   const snackbarState = useSelector(({ snackbar }: RootState) => snackbar);\r\n\r\n   const dispatch = useDispatch();\r\n\r\n   return (\r\n      <AppInit>\r\n         <Navigation colorScheme={colorScheme} />\r\n         <Loading />\r\n         <SnackBar\r\n            visible={Boolean(snackbarState)}\r\n            onDismiss={() => dispatch(clearSnackbar())}\r\n            text={snackbarState}\r\n            duration={3000}\r\n            containerStyle={{\r\n               position: \"absolute\",\r\n               bottom: 50,\r\n               left: 10,\r\n               width: \"60%\",\r\n               zIndex: 200,\r\n               borderRadius: 20,\r\n            }}\r\n         />\r\n         <StatusBar style={colorScheme === LIGHT ? DARK : LIGHT} />\r\n      </AppInit>\r\n   );\r\n}\r\n","module.exports = __webpack_public_path__ + \"static/media/map_marker.a53685b6.png\";","module.exports = __webpack_public_path__ + \"static/media/map_marker_user.15fd7e59.png\";","module.exports = __webpack_public_path__ + \"static/media/map_marker_smoking.b3e26817.png\";","module.exports = __webpack_public_path__ + \"static/media/map_marker_trash.4fc708d1.png\";","module.exports = __webpack_public_path__ + \"./fonts/NotoSansKR-Regular.otf\";"],"sourceRoot":""}